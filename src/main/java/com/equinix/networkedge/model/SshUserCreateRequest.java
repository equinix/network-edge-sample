/*
 * Network Edge APIs
 * API Documentation for NE's Beta APIs. More information about Network Edge marketplace & NE platform can be found [here](https://ecxfabric-documentation.equinix.com/hc/en-us/articles/360021809172-Enterprise-Network-Edge-Beta-Program-Introduction).
 *
 * OpenAPI spec version: General Availability
 * Contact: Network-Edge-Support@equinix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.networkedge.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * SshUserCreateRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-20T13:45:54.773-07:00")
public class SshUserCreateRequest {
  @SerializedName("username")
  private String username = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("deviceUuid")
  private String deviceUuid = null;

  public SshUserCreateRequest username(String username) {
    this.username = username;
    return this;
  }

   /**
   * At least 3 and upto a maximum of 32 alphanumeric characters. The only special characters allowed are - _
   * @return username
  **/
  @ApiModelProperty(example = "user1", required = true, value = "At least 3 and upto a maximum of 32 alphanumeric characters. The only special characters allowed are - _")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public SshUserCreateRequest password(String password) {
    this.password = password;
    return this;
  }

   /**
   * At least 6 and upto a maximum of 12 alphanumeric characters. The only special characters allowed are - _ $ @
   * @return password
  **/
  @ApiModelProperty(example = "pass12", required = true, value = "At least 6 and upto a maximum of 12 alphanumeric characters. The only special characters allowed are - _ $ @")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public SshUserCreateRequest deviceUuid(String deviceUuid) {
    this.deviceUuid = deviceUuid;
    return this;
  }

   /**
   * Get deviceUuid
   * @return deviceUuid
  **/
  @ApiModelProperty(example = "3da0a663-20d9-4b8f-8c5d-d5cf706840c8", required = true, value = "")
  public String getDeviceUuid() {
    return deviceUuid;
  }

  public void setDeviceUuid(String deviceUuid) {
    this.deviceUuid = deviceUuid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SshUserCreateRequest sshUserCreateRequest = (SshUserCreateRequest) o;
    return Objects.equals(this.username, sshUserCreateRequest.username) &&
        Objects.equals(this.password, sshUserCreateRequest.password) &&
        Objects.equals(this.deviceUuid, sshUserCreateRequest.deviceUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, deviceUuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SshUserCreateRequest {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    deviceUuid: ").append(toIndentedString(deviceUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

